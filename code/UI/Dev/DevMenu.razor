@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	<div class=" container">
	<div class="title">Dev Menu</div>
	<div class="title">Item Menu</div>
	<div class="items">
		@foreach (var item in ItemsAndContent.Items)
		{
			<div class="item">
				<div class="icon" style="background-image: url(@item.Icon); border: 2px solid @item.ItemColor;" onclick=@(() => AddItem(item))></div>
				<div class="name">@item.Name</div>
			</div>
		}
	</div>
	<div class="title">Equipment Menu</div>
	<div class="items">
		@foreach (var item in ItemsAndContent.Equipments)
		{
			<div class="item">
				<div class="icon" style="background-image: url(@item.Icon); border: 2px solid @item.ItemColor;" onclick=@(() => AddEquipment(item))></div>
				<div class="name">@item.Name</div>
			</div>
		}
	</div>
		<div class="title">KeyCard Menu</div>
		<div class="items">
			@foreach (var item in ItemsAndContent.KeyCards)
			{
				<div class="item">
					<div class="icon" style="background-image: url(@item.Icon); border: 2px solid @item.ItemColor;" onclick=@(() => AddItem(item))></div>
					<div class="name">@item.Name</div>
				</div>
			}
		</div>
	</div>
</root>

@code
{
	bool isOpen = false;

	ItemInventory _inventory;

	protected override void OnStart()
	{
		base.OnStart();
		_inventory = Components.Get<Stats>(FindMode.InParent).Inventory;
	}

	protected override void OnUpdate()
	{
		base.OnUpdate();

		if (Input.Pressed("devmenu"))
		{
			isOpen = !isOpen;
		}

		if (isOpen)
		{
			AddClass("open");
		}
		else
		{
			RemoveClass("open");
		}
	}

	void AddEquipment(BaseEquipmentItem equipment)
	{
		_inventory.AddEquipment(equipment);
	}

	void AddItem(ItemDef item)
	{
		_inventory.AddItem(item);
	}

}
