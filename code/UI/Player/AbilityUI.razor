@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

@namespace RogueFPS

@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

@namespace RogueFPS

<root>
    <div class="abilities">
		@foreach (var abilityItem in playerStats.Components.Get<PlayerAbilities>().Abilities)
        {
			@if (abilityItem != null)
			{
				<AbilityIcon AbilityName="@abilityItem.AbilityName" 
				AbilityImage="@abilityItem.AbilityIcon" 
				AbilityInput="@abilityItem.InputName" 
				hasAmmo="@HasAmmo(abilityItem)" 
				AmmoCount="@abilityItem.CurrentUseCount" 
				CooldownTime="@CoolDownBar(abilityItem.ReloadTime, abilityItem.StatToUse)" 
				CooldownCheck="@CoolDownMessage(!abilityItem.IsReloading)"
				CooldownTimer="@FormatTimeSince(abilityItem.ReloadTime)"/>
			}
		}
        <div class="equipment">
            @if (equipmentItem != null)
            {
                <AbilityIcon
                    AbilityName="@equipmentItem.Name"
                    AbilityImage="@equipmentItem.Icon"
                    AbilityInput="equipment"
                    hasAmmo="@HasAmmo(equipmentItem)" 
                    AmmoCount="@equipmentItem.CurrentUseCount" 
                    CooldownTime="@CoolDownBar(equipmentItem.ReloadTime, equipmentItem.ReloadTimeAmount)" 
                    CooldownCheck="@CoolDownMessage(!equipmentItem.IsReloading)"
                    CooldownTimer="@FormatTimeSince(equipmentItem.ReloadTime)"
                />
            }
            else
            {
                <AbilityIcon
                    AbilityName="No Equipment"
                    AbilityImage="https://files.facepunch.com/louie/1b0811b1/devenv_eBWjYHMipW.png"
                    AbilityInput="equipment"
                    hasAmmo="false"
                />
            }
        </div>
    </div>
</root>

@code
{
	[Property] PlayerAbilities playerAbility { get; set; }
	[Property] Stats playerStats { get; set; }

	BaseEquipmentItem equipmentItem { get; set; }

	protected override void OnUpdate()
	{
		base.OnUpdate();

		if(playerStats.Inventory.GetEquippedItem() != null)
		{
			equipmentItem = playerStats.Inventory.GetEquippedItem();
		}
	}

	string FormatTimeSince(float time)
	{
		return TimeSpan.FromSeconds(time).ToString(@"\ s");
	}

	public string CoolDownMessage(bool isUsing)
	{
		if (isUsing)
		{
			return "";
		}
		else
		{
			return "cooldown";
		}
	}

	public bool HasAmmo(BaseEquipmentItem weapon)
	{
		if(weapon is null) return false;

		if (weapon.MaxUseCount > 1)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public bool HasAmmo(BaseAbilityItem ability)
	{
		if (ability is null) return false;

		if (ability.MaxUseCount > 1)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public string CoolDownBar(float currentCooldown, float max)
	{
		float cooldownPercentage = currentCooldown / max * 100;
		cooldownPercentage = Math.Clamp(cooldownPercentage, 0, 100); // Ensure it's between 0 and 100
		return $"bottom: {cooldownPercentage}%";
	}

	public string CoolDownBar(float currentCooldown, Stats.PlayerUpgradedStats stat)
	{
		float cooldownPercentage = currentCooldown / playerStats.UpgradedStats[stat] * 100;
		cooldownPercentage = Math.Clamp(cooldownPercentage, 0, 100); // Ensure it's between 0 and 100
		return $"bottom: {cooldownPercentage}%";
	}


	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( Time.Delta);
}
