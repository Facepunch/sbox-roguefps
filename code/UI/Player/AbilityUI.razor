@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

@namespace RogueFPS

@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

@namespace RogueFPS

<root>
    <div class="abilities">
		@foreach (var abilityItem in playerStats.Components.Get<PlayerAbilities>().Abilities)
        {
			@if (abilityItem != null)
			{
				<AbilityIcon AbilityName="@abilityItem.AbilityName" 
				AbilityImage="@abilityItem.AbilityIcon" 
				AbilityInput="@abilityItem.InputName" 
				hasAmmo="@HasAmmo(abilityItem)" 
				AmmoCount="@abilityItem.CurrentUseCount" 
				CooldownTime="@CoolDownBar(abilityItem.ReloadTime, abilityItem.StatToUse)" 
				CooldownCheck="@CoolDownMessage(!abilityItem.IsReloading)"
				CooldownTimer="@FormatTimeSince(abilityItem.ReloadTime)"/>
			}
		}
    </div>
</root>

@code
{
	[Property] PlayerAbilities playerAbility { get; set; }
	[Property] PlayerStats playerStats { get; set; }

	protected override void OnUpdate()
	{
		base.OnUpdate();
	}

	string FormatTimeSince(float time)
	{
		return TimeSpan.FromSeconds(time).ToString(@"\ s");
	}

	public string CoolDownMessage(bool isUsing)
	{
		if (isUsing)
		{
			return "";
		}
		else
		{
			return "cooldown";
		}
	}

	public bool HasAmmo(BaseAbilityItem ability)
	{
		if (ability.MaxUseCount > 1)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public string CoolDownBar(float currentCooldown, PlayerStats.PlayerUpgradedStats stat)
	{
		float cooldownPercentage = currentCooldown / playerStats.UpgradedStats[stat] * 100;
		cooldownPercentage = Math.Clamp(cooldownPercentage, 0, 100); // Ensure it's between 0 and 100
		return $"bottom: {cooldownPercentage}%";
	}


	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( Time.Now,Time.Delta);
}
