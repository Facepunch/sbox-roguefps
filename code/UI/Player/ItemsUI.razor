@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace RogueFPS
<root>
	<div class="upgrades">

		@foreach (var upgrade in TargetObject.Inventory.itemPickUps)
		{
			<div class="upgrade" onmouseover="@(() => OnItemHover(upgrade.Item))" onmouseout="@(() => OnItemHoverOut())">
				<div class="icon" style="background-image: url('@upgrade.Item.Icon'); border: 2px solid @upgrade.Item.ItemColor"></div>
				<div class="amount">@upgrade.Amount</div>
			</div>
		}
		@*
		@for (int i = 0; i < 19; i++)
		{
			<div class="upgrade">
				<div class="icon" onmouseout="" onmouseover=""></div>
				@* <div class="icon" onmouseout="" onmouseover="" style="background-image: url('@upgrade.Icon')"></div> *@
				@* <div class="name">@upgrade.Name</div>	
				<div class="amount">x10</div>
			</div>
		}
	*@
	</div>
</root>

@code
{
	ItemsUIToolTip itemsUIToolTip;

	public void OnItemHover(ItemDef item)
	{
		if(item != null)
		{
			itemsUIToolTip = new ItemsUIToolTip(item);
			Panel.AddChild(itemsUIToolTip);
		}
		else
		{
			itemsUIToolTip?.Delete();
		}
	}
	public void OnItemHoverOut()
	{

		Panel.DeleteChildren();
		itemsUIToolTip?.Delete();
		
	}

	[Property] Stats TargetObject { get; set; }
	protected override void OnUpdate()
	{
		base.OnUpdate();

		if (Input.Down("score"))
		{
			AddClass("open");
		}
		else
		{
			RemoveClass("open");
		}
	}
	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(Time.Delta);
}
